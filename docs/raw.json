{"majorversion": 2, "filemap": {"cfe.module.select.multiple.js": {"classlist": ["cfe.module.select_multiple"], "name": "cfe.module.select.multiple.js", "module": "select"}, "cfe.module.submit.js": {"classlist": ["cfe.module.submit"], "name": "cfe.module.submit.js", "module": "button"}, "cfe.addon.themes.js": {"classlist": ["themes"], "name": "cfe.addon.themes.js", "module": "addon"}, "cfe.addon.dependencies.js": {"classlist": ["dependencies"], "name": "cfe.addon.dependencies.js", "module": "addon"}, "cfe.module.slider.js": {"classlist": ["cfe.module.slider"], "name": "cfe.module.slider.js", "module": "text"}, "cfe.module.file.js": {"classlist": ["cfe.modules.file"], "name": "cfe.module.file.js", "module": "file"}, "cfe.module.password.js": {"classlist": ["cfe.module.password"], "name": "cfe.module.password.js", "module": "text"}, "cfe.addon.toggleCheckboxes.js": {"classlist": ["toggleCheckboxes"], "name": "cfe.addon.toggleCheckboxes.js", "module": "addon"}, "cfe.module.radio.js": {"classlist": ["cfe.modules.radio"], "name": "cfe.module.radio.js", "module": "check"}, "cfe.addon.toolTips.js": {"classlist": ["toolTips"], "name": "cfe.addon.toolTips.js", "module": "addon"}, "cfe.module.select.js": {"classlist": ["cfe.modules.select"], "name": "cfe.module.select.js", "module": "select"}, "cfe.module.checkbox.js": {"classlist": ["cfe.modules.checkbox"], "name": "cfe.module.checkbox.js", "module": "check"}, "cfe.module.text.js": {"classlist": ["cfe.module.text"], "name": "cfe.module.text.js", "module": "text"}, "cfe.base.js": {"classlist": ["cfe.generic", "Element.Helpers"], "name": "cfe.base.js", "module": "core"}, "cfe.module.image.js": {"classlist": ["cfe.module.image"], "name": "cfe.module.image.js", "module": "button"}, "cfe.module.fieldset.js": {"classlist": ["cfe.modules.fieldset"], "name": "cfe.module.fieldset.js", "module": "group"}, "cfe.module.reset.js": {"classlist": ["cfe.module.reset"], "name": "cfe.module.reset.js", "module": "button"}, "cfe.module.textarea.js": {"classlist": [], "name": "cfe.module.textarea.js", "module": "text"}, "cfe.addon.autotab.js": {"classlist": ["autotab"], "name": "cfe.addon.autotab.js", "module": "addon"}}, "modules": {"core": {"description": "The core of custom form elements. Includes cfe.generic and some slight addons to the native Element object.", "submodules": [], "classlist": ["cfe.generic", "Element.Helpers"], "filelist": ["cfe.base.js"], "subdata": {}, "name": "core"}, "group": {"classlist": ["cfe.modules.fieldset"], "subdata": {}, "name": "group", "filelist": ["cfe.module.fieldset.js"], "submodules": []}, "text": {"description": "replaces textarea", "submodules": [], "classlist": ["cfe.module.password", "cfe.module.slider", "cfe.module.text"], "filelist": ["cfe.module.password.js", "cfe.module.slider.js", "cfe.module.text.js", "cfe.module.textarea.js"], "subdata": {}, "extends": "cfe.module.text", "guessedname": "textarea", "guessedtype": "property", "requires": "text", "name": "text"}, "button": {"classlist": ["cfe.module.image", "cfe.module.reset", "cfe.module.submit"], "subdata": {}, "name": "button", "filelist": ["cfe.module.image.js", "cfe.module.reset.js", "cfe.module.submit.js"], "submodules": []}, "file": {"classlist": ["cfe.modules.file"], "subdata": {}, "name": "file", "filelist": ["cfe.module.file.js"], "submodules": []}, "check": {"classlist": ["cfe.modules.checkbox", "cfe.modules.radio"], "subdata": {}, "name": "check", "filelist": ["cfe.module.checkbox.js", "cfe.module.radio.js"], "submodules": []}, "select": {"classlist": ["cfe.modules.select", "cfe.module.select_multiple"], "subdata": {}, "name": "select", "filelist": ["cfe.module.select.js", "cfe.module.select.multiple.js"], "submodules": []}, "addon": {"classlist": ["autotab", "dependencies", "themes", "toggleCheckboxes", "toolTips"], "subdata": {}, "name": "addon", "filelist": ["cfe.addon.autotab.js", "cfe.addon.dependencies.js", "cfe.addon.themes.js", "cfe.addon.toggleCheckboxes.js", "cfe.addon.toolTips.js"], "submodules": []}}, "classmap": {"toolTips": {"name": "toolTips", "author": "Maik", "namespace": "", "module": "addon", "guessedname": "toolTips", "file": "cfe.addon.toolTips.js", "guessedtype": "property", "shortname": "toolTips"}, "cfe.module.password": {"description": "Replacement for elements of type: input[type=password]", "namespace": "cfe.module", "module": "text", "guessedname": "password", "methods": {"createOriginal": {"return": {"type": "HTMLElement", "description": "an input field of type \"password\""}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}}, "extends": "cfe.module.text", "superclass": "cfe.module.text", "file": "cfe.module.password.js", "guessedtype": "property", "shortname": "password", "requires": "text", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "name": "cfe.module.password"}, "cfe.generic": {"name": "cfe.generic", "configs": {"replaces": {"type": "HTMLElement", "description": "if this element shall replace an existing html form element, pass it here", "guessedname": "replaces", "guessedtype": "property"}, "name": {"type": "string", "description": "if this cfe is created programatically, it's possible to set the name attribute of the generated input element", "guessedname": "name", "guessedtype": "property"}, "instanceID": {"type": "int", "description": "instance id for all cfe", "guessedname": "instanceID", "guessedtype": "property"}, "label": {"type": "HTMLElement", "description": "may pass any element as a label (toggling, hovering,..) for this cfe", "guessedname": "label", "guessedtype": "property"}, "disabled": {"type": "boolean", "description": "setting this to true will create a disabled element", "guessedname": "disabled", "guessedtype": "property"}, "spacer": {"type": "string", "description": "path to transparent spacer.gif; it's used for easy css-styling", "guessedname": "spacer", "guessedtype": "property"}, "aliasType": {"type": "string", "description": "the element's wrapper will be of this type (e.g. span or div)", "guessedname": "aliasType", "guessedtype": "property"}}, "constructors": [{"description": "constructor<br />\nbuilding algorithm for cfe (template method)<br />\n<ol>\n<li>setOptions: set Options</li>\n<li>buildWrapper: setup the \"decorator\"</li>\n<li>setupOriginal: procede the \"original\" element (add Events...)</li>\n<li>addLabel: add and procede the label</li>\n<li>initializeAdv: last chance for subclasses to do initialization</li>\n<li>build: various specific dom handling and \"decorator\" building</li>"}], "namespace": "cfe", "module": "core", "events": {"onBlur": {"description": "Fired when the \"original\" element loses focus", "guessedname": "onBlur", "guessedtype": "property"}, "onDisable": {"description": "Fired when \"original\" gets disabled by HTMLElement.disable()", "guessedname": "onDisable", "guessedtype": "property"}, "onMouseOut": {"description": "Fired when the mouse is moved away from the \"decorator\" element", "guessedname": "onMouseOut", "guessedtype": "property"}, "onUpdate": {"description": "Fired when \"original\"'s value changes", "guessedname": "onUpdate", "guessedtype": "property"}, "onMouseOver": {"description": "Fired when the mouse is moved over the \"decorator\" element", "guessedname": "onMouseOver", "guessedtype": "property"}, "onClick": {"description": "Fired when \"decorator\" is clicked by mouse", "guessedname": "onClick", "guessedtype": "property"}, "onRelease": {"description": "Fired when \"decorator\" was pressed and the mouse button is released\nFired when \"original\" was pressed by space key and this key is released", "guessedname": "onRelease", "guessedtype": "property"}, "onFocus": {"description": "Fired when the \"original\" element gets focus (e.g. by tabbing)", "guessedname": "onFocus", "guessedtype": "property"}, "onEnable": {"description": "Fired when \"original\" gets disabled by HTMLElement.enable()", "guessedname": "onEnable", "guessedtype": "property"}, "onPress": {"description": "Fired when pressing down with the mouse button on the \"decorator\"\nFired when pressing the space key while \"original\" has focus", "guessedname": "onPress", "guessedtype": "property"}}, "guessedname": "generic", "methods": {"initialize": {"params": [{"type": "Object", "name": "options", "description": ""}], "description": "constructor<br />\nbuilding algorithm for cfe (template method)<br />\n<ol>\n<li>setOptions: set Options</li>\n<li>buildWrapper: setup the \"decorator\"</li>\n<li>setupOriginal: procede the \"original\" element (add Events...)</li>\n<li>addLabel: add and procede the label</li>\n<li>initializeAdv: last chance for subclasses to do initialization</li>\n<li>build: various specific dom handling and \"decorator\" building</li>", "guessedname": "initialize", "guessedtype": "function"}, "setupOriginal": {"protected": "", "description": "handles the creation of the underlying original form element <br />\nstores a reference to the cfe object in the original form element", "guessedname": "setupOriginal", "guessedtype": "function"}, "getLabel": {"return": {"type": "HTMLElement", "description": ""}, "description": "retreive the label", "guessedname": "getLabel", "guessedtype": "function"}, "clicked": {"protected": "", "description": "wrapper method for event onClick<br />\ndelegates the click to the \"original\" element<br />\nmay be extended by subclasses", "guessedname": "clicked", "guessedtype": "function"}, "setupWrapper": {"protected": "", "description": "adds events and mousepointer style to the \"decorator\"\nusually gets called by buildWrapper", "guessedname": "setupWrapper", "guessedtype": "function"}, "isDisabled": {"return": {"type": "", "description": "boolean"}, "description": "getter for retrieving the disabled state of the \"original\" element", "guessedname": "isDisabled", "guessedtype": "function"}, "build": {"protected": "", "description": "part of the main template method for building the \"decorator\"<br />\nmust be extended by subclasses", "guessedname": "build", "guessedtype": "function"}, "initializeAdv": {"protected": "", "description": "part of the main template method for building the \"decorator\"<br />\ngets called immediately before the build-method<br />\nmay be extended by subclasses", "guessedname": "initializeAdv", "guessedtype": "function"}, "hideOriginal": {"protected": "", "description": "hides the original input element by pushing it out of the viewport <br />\n(no display:none since it's important for screenreaders to parse the original element)", "guessedname": "hideOriginal", "guessedtype": "function"}, "buildWrapper": {"protected": "", "description": "builds the \"decorator\"", "guessedname": "buildWrapper", "guessedtype": "function"}, "enable": {"protected": "", "description": "wrapper method for event onEnable<br />\nmay be extended by subclasses", "guessedname": "enable", "guessedtype": "function"}, "update": {"protected": "", "description": "wrapper method for event onUpdate<br />\nmay be extended by subclasses", "guessedname": "update", "guessedtype": "function"}, "getAlias": {"return": {"type": "HTMLElement", "description": ""}, "description": "retreive the \"decorator\"", "guessedname": "getAlias", "guessedtype": "function"}, "disable": {"protected": "", "description": "wrapper method for event onDisable<br />\nmay be extended by subclasses", "guessedname": "disable", "guessedtype": "function"}, "onMouseOver": {"protected": "", "description": "wrapper method for event onMouseOver<br />\nmay be extended by subclasses", "guessedname": "hover", "guessedtype": "function"}, "unhover": {"protected": "", "description": "wrapper method for event onMouseOut<br />\nmay be extended by subclasses", "guessedname": "unhover", "guessedtype": "function"}, "press": {"protected": "", "description": "wrapper method for event onPress<br />\nmay be extended by subclasses", "guessedname": "press", "guessedtype": "function"}, "removeFocus": {"protected": "", "description": "wrapper method for event onBlur<br />\nmay be extended by subclasses", "guessedname": "removeFocus", "guessedtype": "function"}, "setFocus": {"protected": "", "description": "wrapper method for event onFocus<br />\nmay be extended by subclasses", "guessedname": "setFocus", "guessedtype": "function"}, "getFull": {"return": {"type": "HTMLElement[label, alias]", "description": ""}, "description": "retreive the label and the alias", "guessedname": "getFull", "guessedtype": "function"}, "release": {"protected": "", "description": "wrapper method for event onRelease<br />\nmay be extended by subclasses", "guessedname": "release", "guessedtype": "function"}, "createOriginal": {"return": {"type": "HTMLElement", "description": ""}, "description": "programatically creates an \"original\" element<br />\neach subclass has to implement this", "guessedname": "createOriginal", "guessedtype": "function"}}, "file": "cfe.base.js", "guessedtype": "property", "shortname": "generic", "properties": {"type": {"type": "string", "description": "Describes the type of this element (e.g. Selector, Checkbox or Radiobutton)", "guessedname": "type", "guessedtype": "property"}, "options": {"description": "basic options for all cfes and always available", "guessedname": "options", "guessedtype": "property"}}, "description": "cfe.generic gets extended by modules to start off with standard, button-like behaviours."}, "cfe.modules.select": {"name": "cfe.modules.select", "namespace": "cfe.modules", "module": "select", "guessedname": "select", "methods": {"createOriginal": {"return": {"type": "HTMLElement", "description": "a select input"}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}}, "extends": "cfe.generic\nbug:\nheight of options too small if option with linebreak; standalone and scrolling bug", "superclass": "cfe.generic\nbug:\nheight of options too small if option with linebreak; standalone and scrolling bug", "file": "cfe.module.select.js", "guessedtype": "property", "shortname": "select", "requires": "generic", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "replaces select fields"}, "cfe.modules.fieldset": {"name": "cfe.modules.fieldset", "namespace": "cfe.modules", "module": "group", "guessedname": "fieldset", "extends": "cfe.generic", "superclass": "cfe.generic", "file": "cfe.module.fieldset.js", "guessedtype": "property", "shortname": "fieldset", "requires": "generic", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "enhances fieldsets"}, "cfe.module.slider": {"description": "generates a slider for a text field", "namespace": "cfe.module", "module": "text", "guessedname": "slider", "extends": "cfe.module.text", "superclass": "cfe.module.text", "file": "cfe.module.slider.js", "guessedtype": "property", "shortname": "slider", "requires": "text", "name": "cfe.module.slider"}, "cfe.modules.file": {"name": "cfe.modules.file", "configs": {"fileIcons": {"default": "true", "type": "boolean", "description": "enables the use of fileicons through a bit of markup and css", "guessedname": "fileIcons", "guessedtype": "property"}, "trimFilePath": {"default": "true", "type": "boolean", "description": "show only the filename, not the whole path", "guessedname": "trimFilePath", "guessedtype": "property"}}, "namespace": "cfe.modules", "module": "file", "guessedname": "file", "methods": {"getFilePath": {"return": {"type": "HTMLElement", "description": ""}, "description": "retreive the filepath", "guessedname": "getFilePath", "guessedtype": "function"}, "getFull": {"return": {"type": "HTMLElement[label, alias, filePath]", "description": ""}, "description": "retreive the label, the alias and the filepath", "guessedname": "getFull", "guessedtype": "function"}, "createOriginal": {"return": {"type": "HTMLElement", "description": "an input field of type \"file\""}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}}, "extends": "cfe.generic", "superclass": "cfe.generic", "file": "cfe.module.file.js", "guessedtype": "property", "shortname": "file", "requires": "generic", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "replaces file upload fields\nbug:\nupdate event onMouseOut triggers even if nothing changed\nff 3.0.7     - no pointer\nopera        - no pointer; no focus on label if ori focussed, click event triggers twice\nie 8         - no focus on label if ori focussed\nie 7         - no focus on label if ori focussed"}, "cfe.modules.radio": {"name": "cfe.modules.radio", "namespace": "cfe.modules", "module": "check", "guessedname": "radio", "methods": {"initializeAdv": {"protected": "", "description": "fixes a bug in other browsers than those with trident or gecko engine", "guessedname": "initializeAdv", "guessedtype": "function"}, "check": {"description": "public method to check a radiobutton programatically\nall other radio buttons in the same group (== same name att) are unchecked", "public": "", "guessedname": "check", "guessedtype": "function"}, "createOriginal": {"return": {"type": "HTMLElement", "description": "an input field of type \"radio\""}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}}, "extends": "cfe.modules.checkbox", "superclass": "cfe.modules.checkbox", "file": "cfe.module.radio.js", "guessedtype": "property", "shortname": "radio", "requires": "checkbox", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "replaces radiobuttons\nbug:\nie 8         - rb alias w/o implicit labelling trigger update twice; ori triggers update twice\nie 7         - rb alias w/o implicit labelling trigger update twice; ori triggers update twice"}, "autotab": {"name": "autotab", "namespace": "", "module": "addon", "guessedname": "autotab", "file": "cfe.addon.autotab.js", "guessedtype": "property", "shortname": "autotab", "description": "this adds autotabbing functionality to cfe"}, "themes": {"name": "themes", "namespace": "", "module": "addon", "guessedname": "themes", "file": "cfe.addon.themes.js", "guessedtype": "property", "shortname": "themes", "description": "this adds theming functionality to cfe"}, "cfe.module.select_multiple": {"name": "cfe.module.select_multiple", "namespace": "cfe.module", "module": "select", "guessedname": "select_multiple", "methods": {"build": {"protected": "", "description": "customize the \"decorator\"\nsets sliding doors and creates and injects options", "guessedname": "build", "guessedtype": "function"}}, "extends": "cfe.module.select\nbug:\nmouseWheel support needed", "superclass": "cfe.module.select\nbug:\nmouseWheel support needed", "file": "cfe.module.select.multiple.js", "guessedtype": "property", "shortname": "select_multiple", "requires": "select", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "replaces select fields with attribute multiple set"}, "dependencies": {"name": "dependencies", "author": "Maik", "namespace": "", "module": "addon", "guessedname": "dependencies", "methods": {"attachDependencies": {"params": [{"type": "Object", "name": "el", "description": ""}], "description": "this is called when a new item of a cfemodule gets initialized\nit checks, whether there are dependencies for this element and adds them to its options", "guessedname": "attachDependencies", "guessedtype": "function"}, "addDependencies": {"params": [{"type": "Object", "name": "el", "description": ""}, {"type": "Array", "name": "dep", "description": ""}], "description": "adds dependencies for an element", "guessedname": "addDependencies", "guessedtype": "function"}, "addDependency": {"params": [{"type": "Object", "name": "el", "description": ""}, {"type": "Object", "name": "dep", "description": ""}], "description": "adds dependency for an element", "guessedname": "addDependency", "guessedtype": "function"}}, "file": "cfe.addon.dependencies.js", "guessedtype": "property", "shortname": "dependencies", "description": "ujsd"}, "cfe.module.reset": {"name": "cfe.module.reset", "constructors": [{"description": "Provides replacement for input[type=reset]"}], "namespace": "cfe.module", "module": "button", "guessedname": "reset", "methods": {"setupOriginal": {"description": "adds an additional click event to the button to procede a form's reset", "guessedname": "setupOriginal", "guessedtype": "function"}, "notifyReset": {"description": "traverses all input, textarea, select elements in the current scope (form)\nand fires their change event to notify all listeners, the elements have beed resetted", "guessedname": "notifyReset", "guessedtype": "function"}, "createOriginal": {"return": {"type": "HTMLElement", "description": "an input field of type \"reset\""}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}}, "extends": "cfe.module.submit", "superclass": "cfe.module.submit", "file": "cfe.module.reset.js", "guessedtype": "property", "shortname": "reset", "requires": "submit", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "Provides replacement for input[type=reset]"}, "cfe.module.text": {"name": "cfe.module.text", "configs": {"slidingDoors": {"default": "2", "type": "int", "description": "if > 0, it will create markup for css sliding doors tech<br />\nthe number defines the amount of wrappers to create around this element<br />\n2: standard sliding doors (x- or y-Axis)<br />\n4: sliding doors in all directions (x/y-Axis)", "guessedname": "slidingDoors", "guessedtype": "property"}}, "namespace": "cfe.module", "module": "text", "guessedname": "text", "methods": {"setupWrapper": {"protected": "", "description": "since there's no real \"decorator\" (just wrapping for sliding doors) for textfields, it won't fetch events", "guessedname": "setupWrapper", "guessedtype": "function"}, "build": {"protected": "", "description": "customize the \"decorator\" (=> sliding doors wrappers)", "guessedname": "build", "guessedtype": "function"}, "createOriginal": {"return": {"type": "HTMLElement", "description": "an input field of type \"text\""}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}}, "extends": "cfe.generic", "superclass": "cfe.generic", "file": "cfe.module.text.js", "guessedtype": "property", "shortname": "text", "requires": "generic", "properties": {"dontRemoveForFromLabel": {"protected": "", "type": "boolean", "description": "flag to prevent deleting the for attribute from the label<br />\nfor text fields this is important, since the \"original\" element doesn't get hidden", "guessedname": "dontRemoveForFromLabel", "guessedtype": "property"}, "type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "replaces input[type=text]"}, "cfe.module.submit": {"name": "cfe.module.submit", "configs": {"slidingDoors": {"default": "4", "type": "int", "description": "if > 0, it will create markup for css sliding doors tech<br />\nthe number defines the amount of wrappers to create around this element<br />\n2: standard sliding doors (x- or y-Axis)<br />\n4: sliding doors in all directions (x/y-Axis)", "guessedname": "slidingDoors", "guessedtype": "property"}}, "constructors": [{"description": "Extends the generic module to replace inputs of type 'submit'"}], "namespace": "cfe.module", "module": "button", "guessedname": "submit", "methods": {"initializeAdv": {"description": "Hides the original element and adds class jsButton to decorator", "guessedname": "initializeAdv", "guessedtype": "function"}, "build": {"protected": "", "description": "customize the \"decorator\" (=> sliding doors wrappers)\ndisables text selection on the injected label", "guessedname": "build", "guessedtype": "function"}, "createOriginal": {"return": {"type": "HTMLElement", "description": "an input field of type \"submit\""}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}}, "extends": "cfe.generic", "superclass": "cfe.generic", "file": "cfe.module.submit.js", "guessedtype": "property", "shortname": "submit", "requires": "generic", "properties": {"type": {"type": "string", "description": "Describes the type of this element (Submit)", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "Extends the generic module to replace inputs of type 'submit'"}, "Element.Helpers": {"name": "Element.Helpers", "namespace": "Element", "module": "core", "guessedname": "Helpers", "methods": {"disableTextSelection": {"description": "cross-browser method for disabling the text selection by setting css attributes", "guessedname": "disableTextSelection", "guessedtype": "function"}, "toggleDisabled": {"return": {"type": "boolean", "description": "true, if element could be toggled"}, "description": "enables or disabled a HTMLElement if its a form element depending on it's current state", "guessedname": "toggleDisabled", "guessedtype": "function"}, "enable": {"return": {"type": "boolean", "description": "true, if element could be enabled"}, "description": "enables a HTMLElement if its a form element by setting the disabled attribute to false", "guessedname": "enable", "guessedtype": "function"}, "setSlidingDoors": {"return": {"type": "", "description": "HTMLElement or NULL the wrapped HTMLElement"}, "params": [{"type": "", "name": "count", "description": ""}, {"type": "", "name": "type", "description": ""}, {"type": "", "name": "prefix", "description": ""}], "description": "generates the markup used by sliding doors css technique to use with this element", "guessedname": "setSlidingDoors", "guessedtype": "function"}, "disable": {"return": {"type": "", "description": "boolean true, if element could be disabled"}, "description": "disables a HTMLElement if its a form element by setting the disabled attribute to true", "guessedname": "disable", "guessedtype": "function"}, "getLabel": {"return": {"type": "", "description": "HTMLElement or NULL"}, "description": "returns the label-element which belongs to this element", "guessedname": "getLabel", "guessedtype": "function"}}, "file": "cfe.base.js", "guessedtype": "property", "shortname": "Helpers", "description": "extend Elements with some Helper functions"}, "toggleCheckboxes": {"name": "toggleCheckboxes", "namespace": "", "module": "addon", "guessedname": "toggleCheckboxes", "file": "cfe.addon.toggleCheckboxes.js", "guessedtype": "property", "shortname": "toggleCheckboxes", "description": "implements selectAll/deselectAll functionality into custom form elements"}, "cfe.modules.checkbox": {"name": "cfe.modules.checkbox", "namespace": "cfe.modules", "module": "check", "events": {"onUnCheck": {"description": "Fired when the original element's checked state is set to false", "guessedname": "onUncheck", "guessedtype": "property"}, "onCheck": {"description": "Fired when the original element gets checked", "guessedname": "onCheck", "guessedtype": "property"}}, "guessedname": "checkbox", "methods": {"uncheck": {"description": "public method to uncheck a checkbox programatically", "public": "", "guessedname": "uncheck", "guessedtype": "function"}, "getFull": {"return": {"type": "HTMLElement[label, alias]", "description": ""}, "description": "retreive the label and the alias in inverted direction, since with checkboxes, the decorator is more often placed in front of the label", "guessedname": "getFull", "guessedtype": "function"}, "update": {"protected": "", "description": "wrapper method for event onUpdate<br />\nadditionally adds the correct checked state to the decorator", "guessedname": "update", "guessedtype": "function"}, "build": {"protected": "", "description": "creates the decorator checkbox as simple img[src=spacer] element\nafter creation, update is called to properly set the state", "guessedname": "build", "guessedtype": "function"}, "setStateTo": {"description": "public method to set the state of a checkbox programmatically\nTODO: check if this is obsolete, because the original should have an onupdate listener", "public": "", "guessedname": "setStateTo", "guessedtype": "function"}, "check": {"description": "public method to check a checkbox programatically", "public": "", "guessedname": "check", "guessedtype": "function"}, "createOriginal": {"protected": "", "return": {"type": "HTMLElement", "description": "an input field of type \"checkbox\""}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}}, "extends": "cfe.generic", "superclass": "cfe.generic", "file": "cfe.module.checkbox.js", "guessedtype": "property", "shortname": "checkbox", "requires": "generic", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "replaces checkboxes\nbug:\nopera        - original update triggers twince when clicking the ori\nie 8         - original update triggers twince when clicking the ori\nie 7         - original update triggers twince when clicking the ori"}, "cfe.module.image": {"name": "cfe.module.image", "configs": {"statePrefix": {"default": "-cfeState-", "type": "string", "description": "the prefix which will get appended to the name of the image, just before the state suffix<br />\ne.g. if the name of the image is 'cfeSubmit.gif' the resulting name of the hovered state will be cfeSubmit-cfeState-H.gif (when using default value)<br />", "guessedname": "statePrefix", "guessedtype": "property"}}, "constructors": [{"description": "Provides replacement for input[type=image]<br />\nThis module dynamically appends the current state (hover, press) to the image filename given in the src attribute"}], "namespace": "cfe.module", "module": "button", "guessedname": "image", "methods": {"setFocus": {"protected": "", "description": "wrapper method for event onFocus<br />\nsets the \"focus\" state of the image button", "guessedname": "setFocus", "guessedtype": "function"}, "hover": {"protected": "", "description": "wrapper method for event onMouseOver<br />\nsets the \"hover\" state of the image button", "guessedname": "hover", "guessedtype": "function"}, "removeFocus": {"protected": "", "description": "wrapper method for event onBlur<br />\nclears the \"focus\" state of the image button", "guessedname": "removeFocus", "guessedtype": "function"}, "disable": {"protected": "", "description": "wrapper method for event onDisable<br />", "guessedname": "disable", "guessedtype": "function"}, "clearState": {"protected": "", "description": "clears all states", "guessedname": "clearState", "guessedtype": "function"}, "press": {"protected": "", "description": "wrapper method for event onPress<br />\nsets the \"pressed\" state of the image button", "guessedname": "press", "guessedtype": "function"}, "enable": {"protected": "", "description": "wrapper method for event onEnable<br />", "guessedname": "enable", "guessedtype": "function"}, "unhover": {"protected": "", "description": "wrapper method for event onMouseOut<br />\nclears the \"hover\" state of the image button", "guessedname": "unhover", "guessedtype": "function"}, "initializeAdv": {"protected": "", "description": "wraps the decorator around the original element\ncretaes a regual expression with the given statePrefix to set/clear the different states", "guessedname": "initializeAdv", "guessedtype": "function"}, "release": {"protected": "", "description": "wrapper method for event onRelease<br />\nclears the \"pressed\" state of the image button", "guessedname": "release", "guessedtype": "function"}, "createOriginal": {"return": {"type": "HTMLElement", "description": "an input field of type \"image\""}, "description": "Method to programmatically create an \"original\" HTMLElement", "guessedname": "createOriginal", "guessedtype": "function"}, "setState": {"protected": "", "description": "sets a given state", "guessedname": "setState", "guessedtype": "function"}}, "extends": "cfe.generic", "superclass": "cfe.generic", "file": "cfe.module.image.js", "guessedtype": "property", "shortname": "image", "requires": "generic", "properties": {"type": {"type": "string", "description": "Describes the type of this element", "guessedname": "type", "guessedtype": "property"}, "selector": {"type": "string", "description": "CSS Selector to fetch \"original\" HTMLElements for replacement with this module", "guessedname": "selector", "guessedtype": "property"}}, "description": "Provides replacement for input[type=image]<br />\nThis module dynamically appends the current state (hover, press) to the image filename given in the src attribute"}}, "version": "0.9.2", "namespaces": ["cfe", "Element", "cfe.module", "cfe.modules"]}